Чтобы подключить эту библиотеку, просто закинь файл matrix.h в папку с проектом, например я закидываю в проекте в папку Header Files, затем, в тексте где прогаешь пропиши #include "matrix.h"

ВАЖНО, для этой библеотеки нужно, чтобы у тбя были также установлены библиотеки <iostream> и <math.h>, но с очень большой вероятностью, у тебя уже все это стоит, так что не парься. Вроде как всё.






//------------------------тестовый код ниже



#include <iostream>
#include "matrix.h"
using namespace std;

void main() {
	matrix one, two; //создадутся две матрицы с размерами 0х0

	cin >> one >> two; //можно вводить патрицы через cin, вас попросят ввести кол-во столбцов, строк и значения для каждой ячейки

	cout << one << endl << two << endl; //можно также выводить матрицы на экран

	cout << one + two << endl << one - two << endl; //матрицы можно скалдывать и вычитать
	cout << one * two << endl << 5.1 * one << endl << one * (-1.2) << endl; //матрицы можно умножать, также умножать на числа слева и справа

	double val[9] = { 1.2, 2.3, 3, -6.88, 0.04, 5, -3, 2, 2 };
	one.set(3, 3, val); //матрицу можно переобозначить, например тут сделал матрицу 3x3 со значениями массива values

	cout << one.get_val(2, 3) << endl; //можно получать значение 2 стобца 3 строки, например
	cout << one.get_stroke(1) << endl << one.get_column(2) << endl; //можно получать строку и столбец
	cout << one.minor(1, 2) << endl; //можно получать минор для элемента 1 2, например

	cout << one.identity() << endl; //можно получить единичную матрицу nxn, где n будет браться от высоты или от ширины, что меньше

	cout << one.det() << endl; //можно получить определитель для кваратной матрицы

	cout << one.ks_transvection(2, -1.5) << endl << one.kc_transvection(1, 0.5) << endl; //можно умножать строку(ks) или столбец(kc) на коэфициент, например 2 строку умножить на -1.5
	cout << one.swaps_transvection(1, 2) << endl << one.swapc_transvection(1, 3) << endl; //можно менять местами строки(swaps) или столбцы(swapc), например 1 строку поменять со 2
	cout << one.s_transvection(1, 2, 2.5) << endl << one.c_transvection(2, 3, -1.5) << endl; //можно складывать строки(s) или столбцы(c), например к 1 строке прибавить втору, умноженную на 2.5

	cout << one.transpose() << endl; //можно транспонировать матрицу
	cout << one.alg_comp() << endl; //можно получать матрицу алгебраических дополнений

	cout << one.power(-1) << endl << one.power(3) << endl; // можно возводить матрицу в степень, степень должна быть целым числом больше или равным -1, при -1 находит обратную матрицу, при 0 - получат единичную матрицу, при 1 получается ту же матрицу, больше единицы находит степень матрицы

	system("pause");
}